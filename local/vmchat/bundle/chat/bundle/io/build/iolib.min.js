/*
  2014 Pinky Sharma  {@link http://vidyamantra.com}
 @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
*/
define(["jquery"],function(d){return io={cfg:{},sock:null,wsuri:null,error:null,uniquesids:null,init:function(b,c){this.cfg=b;this.wsconnect()},wsconnect:function(){io.wsuri=this.cfg.rid;console.log(this.cfg.rid);"WebSocket"in window?this.sock=new WebSocket(io.wsuri):"MozWebSocket"in window?this.sock=new MozWebSocket(io.wsuri):(console.log("Browser does not support WebSocket!"),this.error="Browser does not support WebSocket");var b=this;this.sock.onopen=function(){console.log("Connected to "+b.cfg.rid);
d.event.trigger({type:"connectionopen"});b.userauthenticat();b.addclient()};this.sock.binaryType="arraybuffer";this.sock.onmessage=function(c){try{if(c.data instanceof ArrayBuffer)d.event.trigger({type:"binrec",message:c.data});else{var a=JSON.parse(c.data);if("joinroom"==a.type){console.log("New user join room "+a.users);var f=null;null!=b.uniquesids&&d.each(a.clientids,function(a,c){void 0==b.uniquesids[a]&&(f=a)});b.uniquesids=a.clientids;d.event.trigger({type:"member_added",message:a.users,newuser:f})}if("broadcastToAll"==
a.type){console.log("json  : display msg");var e="";void 0!=a.userto&&(e=a.userto);d.event.trigger({type:"newmessage",message:a.m,fromUser:a.user,toUser:e})}"userleft"==a.type&&(console.log("user logout"),e="",void 0!=a.userto&&(e=a.userto),null!=b.uniquesids&&delete b.uniquesids[a.user.userid],d.event.trigger({type:"user_logout",fromUser:a.user,message:"offline",toUser:e}));"leftroom"==a.type&&(console.log("member removed"),d.event.trigger({type:"member_removed",message:a.users}));"Unauthenticated"==
a.type&&(console.log("Unauthenticated user"),d.event.trigger({type:"authentication_failed",message:"Authentication failed"}));"Multiple_login"==a.type&&(console.log("Multiple_login"),d.event.trigger({type:"Multiple_login"}))}}catch(g){console.log("Error catched   : "+g),d.event.trigger({type:"error",message:g})}};this.sock.onerror=function(c){b.error=c;console.log("Error:"+c);d.event.trigger({type:"error",message:c})};this.sock.onclose=function(c){console.log("Connection Closed");d.event.trigger({type:"connectionclose",
message:c.reason});console.log("Connection closed (wasClean = "+c.wasClean+", code = "+c.code+", reason = '"+c.reason+"')");setTimeout(function(){b.wsconnect()},5E3)}},userauthenticat:function(){var b=JSON.stringify({cfun:"authenticate",arg:{authuser:this.cfg.authuser,authpass:this.cfg.authpass}});this.sock.send(b)},addclient:function(){var b=JSON.stringify({cfun:"joinroom",arg:{client:this.cfg.userid,roomname:this.cfg.room,user:this.cfg.userobj}});this.sock.send(b)},send:function(b){var c={cfun:"broadcastToAll",
arg:{msg:b}};1<arguments.length&&(c.arg.touser=this.uniquesids[arguments[1]]);c=JSON.stringify(c);this.sock.send(c)},sendBinary:function(b){this.sock.send(b.buffer)},disconnect:function(){this.sock.onclose=function(){};this.sock.close();console.log("i am closing this connection")}}});
