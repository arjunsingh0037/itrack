<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * local_usermanagement plugin
 *
 * @package    local_courserecomendation
 * @copyright  2016 lmsofindia
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
require_once("$CFG->libdir/formslib.php");

class allcohort_form extends moodleform {

    //Add elements to form
    public function definition() {
        global $DB,$CFG;
        require_once($CFG->dirroot.'/cohort/lib.php');
        $mform = $this->_form; // Don't forget the underscore! 
        $allcohorts = cohort_get_all_cohorts();

        if($allcohorts) {
        foreach ($allcohorts['cohorts'] as $key => $allcohort) {
            $allcohortarray[$key] = $allcohort->name;
        }
        }

        $mform->addElement('header', 'formheader', get_string('selectcohortheader','local_usermanagement'));
        $select0 = $mform->addElement('select', 'allcohort', get_string('cohort', 'local_usermanagement'), $allcohortarray);
        $mform->addHelpButton('allcohort', 'allcohort', 'local_usermanagement');
        $select0->setMultiple(true);
        $mform->setType('allcohort', PARAM_INT);
        $mform->addElement('hidden', 'cohort', '1');
        $mform->setType('cohort', PARAM_RAW);
        $syscontext = context_system::instance();
        $actions = array(0=>get_string('choose').'...');
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[1] = get_string('confirm');
        }
        if (has_capability('moodle/site:readallmessages', $syscontext) && !empty($CFG->messaging)) {
            $actions[2] = get_string('messageselectadd');
        }
        if (has_capability('moodle/user:delete', $syscontext)) {
            $actions[3] = get_string('delete');
        }
        $actions[4] = get_string('displayonpage');
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[5] = get_string('download', 'admin');
        }
        
        if (has_capability('moodle/role:assign', $syscontext)){
             //TODO: MDL-24064
            //$actions[6] = get_string('enrolmultipleusers', 'admin');
        }
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[7] = get_string('forcepasswordchange');
        }
        if (has_capability('moodle/cohort:assign', $syscontext)) {
            $actions[8] = get_string('bulkadd', 'core_cohort');
        }
        /*nihar to add suspend bulk user*/
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[9] = get_string('autogeneratedpassword', 'local_usermanagement');
        }
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[10] = get_string('setpassword', 'local_usermanagement');
        }
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[11] = get_string('suspenduser', 'admin');
        }
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[12] = get_string('unsuspenduser', 'admin');
        }
        if (has_capability('moodle/user:update', $syscontext)) {
            $actions[13] = get_string('suspendusercriteria', 'local_usermanagement');
        }
        /*end*/
        
        $objs = array();
        $objs[] =& $mform->createElement('select', 'action', null, $actions);
        $objs[] =& $mform->createElement('submit', 'doaction', get_string('go'));
        $mform->addElement('group', 'actionsgrp', get_string('withselectedcohorts', 'local_usermanagement'), $objs, ' ', false);
        
        
    }

    //Custom validation should be added here
    function validation($data, $files) {
        return array();
    }

}
